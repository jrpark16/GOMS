# -*- coding: utf-8 -*-
"""TI code

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j0az46gw3vsbCV2Z-5G16wjzzvx1aNQS
"""

data_2019_1 = data_2019[data_2019.G181SQ001 == 1]
data_2019_1

data_2019_1 = data_2019_1.reset_index(drop=True)
data_2019_1

data_2019_1 = data_2019_1.dropna(subset=['G181A297'], how='any', axis = 0)

data_2019_1.shape

data_2019_1['G181A297'].value_counts().plot.pie(autopct = '%.2f%%');
data_2019_1['G181A297'].value_counts()

job1_2019 = data_2019_1[data_2019_1.G181A297 == 1] 
job2_2019 = data_2019_1[data_2019_1.G181A297 == 2]

print(job1_2019.shape)
print(job2_2019.shape)

job1_numerical_data_2019 = job1_2019.select_dtypes('number')
job2_numerical_data_2019 = job2_2019.select_dtypes('number')

job1_data_2019 = job1_numerical_data_2019.drop(['G181A297'], axis = 1)
job2_data_2019 = job2_numerical_data_2019.drop(['G181A297'], axis = 1)

job1_data_2019['jobleft'] = 0
job2_data_2019['jobleft'] = 1

data_2019_2 = pd.concat([job1_data_2019, job2_data_2019], axis = 0)
data_2019_2

data_2019_2['jobleft'].value_counts().plot.pie(autopct = '%.2f%%');
data_2019_2['jobleft'].value_counts()

jobleft_2019 = data_2019_2.iloc[:, -1]

vari1 = data_2019_2.loc[:, ['G181K047', 'G181K045', 'G181K056']]

vari2 = data_2019_2.loc[:, ['G181A126', 'G181A127', 'G181A140', 'G181Q017', 'G181A134', 'G181A131', 'G181A135']]

vari3 = data_2019_2.loc[:, ['G181A142', 'G181A143', 'G181A144']]

data_2019_rename = varisum.rename({'G181K047':'q1', 'G181K045':'q2', 'G181K056':'q3', 'G181A126':'q4', 'G181A127':'q5',
                                   'G181A140':'q6', 'G181Q017':'q7', 'G181A134':'q8', 'G181A131':'q9', 'G181A135': 'q10',
                                   'G181A142':'q11', 'G181A143':'q12', 'G181A144':'q13'}, axis = 'columns')

varisum1 = pd.concat([data_2019_rename, jobleft_2019], axis = 1)

x = varisum2.iloc[:, 0:-1]
y = varisum2.iloc[:, -1]

import statsmodels.api as sm
ppp = sm.add_constant(x)
model_beta = sm.OLS(y, x)
results = model_beta.fit()

print( results.summary() )

varisum2.describe()

#XGBoost
from xgboost import XGBClassifier
model_XGB = XGBClassifier()
model_XGB.fit(x, y)

Fscore_var = model_XGB.get_booster().get_fscore()
X, a = plt.subplots(figsize = (10, 12))
plot_importance(Fscore_var, ax = a);